geom_line(aes(y = population), color = "red") +
geom_line(aes(y = household_income), color = "green") +
geom_line(aes(y = median_age), color = "blue") +
geom_line(aes(y = bachelors_degree), color = "purple")
state
books_df <- books_df[order(books_df$rank_last_week),]
books_df <- books_df[order(books_df$rank_last_week),]
books_df <- fromJSON(url, flatten = TRUE)
library(httr)
library(jsonlite)
library(dplyr)
apikey <- "04GA736x2mowjM9AOusr0XYdn2t3uVSN"
url <-  paste0("https://api.nytimes.com/svc/books/v3//lists/current/hardcover-fiction.json?api-key=",apikey)
url
url <-  paste0("https://api.nytimes.com/svc/books/v3//lists/current/hardcover-fiction.json?api-key=",apikey)
# url
response <- GET(url)
response
headers(response)
headers(response)
books_df <- fromJSON(url, flatten = TRUE)
books_df <- books_df$results
books_df <- books_df$books
books_df
books_df <- books_df[order(books_df$rank_last_week),]
books_df
# Convert to a tibble
library("tibble")
my_data <- as_data_frame(json_data)
json_data <- content(response, "text")
prettify(json_data)
# Convert to a tibble
library("tibble")
my_data <- as_data_frame(json_data)
# Print
my_data
books_df %>%
names
books_df <- books_df[, c(11, 12, 8, 7, 6, 9, 2)]
books_df
books_df <- books_df[, c(11, 12, 8, 2, 7, 6, 9)]
books_df <- books_df[, c(11, 12, 8, 2, 7, 6, 9)]
books_df <- fromJSON(url, flatten = TRUE)
books_df <- books_df$results
books_df <- books_df$books
books_df
books_df <- books_df[, c(11, 12, 8, 2, 7, 6, 9)]
books_df
books_df[books_df$rank_last_week == 1, ]
books_df <- fromJSON(url, flatten = TRUE)
books_df <- books_df$results
books_df <- books_df$books
books_df
books_df <- books_df[, c(2, 11, 12, 8, 7, 6, 9)]
books_df
library(tidyverse)
library(tidyr)
library(dplyr)
library(ggplot2)
library(readr)
dataset1 <- read_csv("https://raw.githubusercontent.com/uzmabb182/Data_607_Project2/main/census_us_county_data.csv")
head(dataset1)
names(dataset1) <- tolower(names(dataset1))    # Convert colnames to lower case
dataset1
dataset1 <- dataset1 %>% separate(name, c("county", "state"), ",")
dataset1
dataset1 <- dataset1 %>% distinct()
dataset1
names(dataset1)[4:9] <- c('median_age', 'household_income', 'per_capita_income', 'poverty_count',
'poverty_rate', 'unemployment_rate')
dataset1
dataset1$county <-gsub(" County","",as.character(dataset1$county))
dataset1
glimpse(dataset1)
str(dataset1)
dataset1$state <- trimws(dataset1$state, which = c("left"))
str(dataset1)
# sort by state and county
# sort the dataframe in R using arrange
dataset1 <- arrange(dataset1,state, county)
dataset1
dataset1[is.na(dataset1)] <- 0
dataset1
library(ggplot2)
# Step 1
dataset1 %>%
#Step 2
group_by(state)
# First filter the state Alabama and selecting the columns
dataset1_alabama <- dataset1 %>% filter(state == "Alabama") %>%
select(c(3:9, 1))
dataset1_alabama
str(dataset1_alabama)
data1_al <- dataset1_alabama %>%
pivot_longer(cols = c(2:8),
names_to = "Variable",
values_to = "Value")
data1_al
bar_plot <- ggplot(data = data1_al, aes(x = Variable, y = Value, fill = Variable)) +
geom_bar(stat = "identity") + coord_flip() +
labs(
x = "Variables",
y = "Values",
title = paste(
"Census data for Alabama"
)
)
bar_plot
dataset2 <- read_csv("https://raw.githubusercontent.com/uzmabb182/Data_607_Project2/main/ers_usda_education_data.csv")
head(dataset2)
colnames(dataset2)
dataset2 <- select(dataset2, -(4:32))
dataset2
names(dataset2) <- gsub(" ", "_", names(dataset2))
dataset2
names(dataset2) <- gsub(",", "", names(dataset2))
dataset2
names(dataset2) <- gsub("'", "", names(dataset2))
dataset2
names(dataset2) <- gsub("-", "_", names(dataset2))
dataset2
names(dataset2) <- tolower(names(dataset2))    # Convert colnames to lower case
dataset2
dataset2$area_name <-gsub(" County","",as.character(dataset2$area_name))
dataset2
dataset2 <- dataset2 %>% distinct()
dataset2
dataset2 <- dataset2[-c(seq(1, 1, by=0)),]
dataset2
dataset2[is.na(dataset2)] <- 0
dataset2
names(dataset2)[3] <- c('county')
dataset2
# sort by state and county
# sort the dataframe in R using arrange
dataset2 <- arrange(dataset2,state, county)
dataset2
glimpse(dataset2)
dataset3 <- read_csv("https://raw.githubusercontent.com/uzmabb182/Data_607_Project2/main/county_fips_data.csv")
# Now tidying dataset3
head(dataset3)
names(dataset3) <- tolower(names(dataset3))    # Convert colnames to lower case
dataset3
dataset3$county_name <-gsub(" County","",as.character(dataset3$county_name))
dataset3
dataset3 <- rename(dataset3, county = county_name)
dataset3
dataset3[is.na(dataset3)] <- 0
str(dataset3)
glimpse(dataset3)
joint_df <- dataset2 %>% inner_join(dataset3,by="county")
joint_df
#combined_df<- merge(dataset1, joint_df, by = 'county', all.x= TRUE)
combined_df = dataset1 %>% inner_join(joint_df,by="county")
combined_df
col_remove <- c("state.y", "fips")     # Define columns that should be dropped
combined_df <- combined_df %>%            # Apply select & one_of functions
select(- one_of(col_remove))
combined_df
combined_df <- rename(combined_df, state = state.x)
combined_df
combined_df <- combined_df[!duplicated(combined_df[,c('county')]),]
combined_df
summary(combined_df)
# Get Maximum value of the column by column name
max(combined_df$per_capita_income)
combined_df <- combined_df %>% relocate(state, .before = population)
combined_df
by_state <- combined_df %>% group_by(state)
by_state <- by_state %>% summarise(
population = mean(population),
median_age = mean(median_age),
per_capita_income = mean(per_capita_income),
poverty_count = mean(poverty_count),
household_income = mean(household_income),
bachelors_degree = mean(bachelors_degree_or_higher_2015_19)
)
by_state
by_state <- combined_df %>% group_by(state)
by_state <- by_state %>% summarise(
population = mean(population),
median_age = mean(median_age),
per_capita_income = mean(per_capita_income),
poverty_count = mean(poverty_count),
household_income = mean(household_income),
bachelors_degree = mean(bachelors_degree_or_higher_2015_19)
)
by_state
library(ggplot2)
ggplot(by_state, aes(fill=state, y=poverty_count, x=state)) +
geom_bar(position='dodge', stat='identity')
x<-sample(0:9,20,replace=TRUE)
y<-sample(0:9,20,replace=TRUE)
df<-data.frame(x,y)
ggplot(df,aes(x,y))+geom_point()+theme(axis.line.x.bottom=element_line(size=2))
library(ggplot2)
ggplot(by_state, aes(fill=state, y=poverty_count, x=state)) +
geom_bar(position='dodge', stat='identity')
library(ggplot2)
ggplot(by_state, aes(fill=state, y=poverty_count, x=state)) +
geom_bar(position='dodge', stat='identity',
color = "black", width = 0.40)
library(ggplot2)
ggplot(by_state, aes(fill=state, y=poverty_count, x=state)) +
geom_bar(position='dodge', stat='identity',
color = "black", width = 1.0)
library(ggplot2)
ggplot(by_state, aes(fill=state, y=poverty_count, x=state)) +
geom_bar(position='dodge', stat='identity',
color = "black", width = 0.80)
library(ggplot2)
ggplot(by_state, aes(fill=state, y=poverty_count, x=state)) +
geom_bar(position='dodge', stat='identity',
color = "black", width = 0.60)
by_state %>% slice(which.max(poverty_count))
by_state <- combined_df %>% group_by(state)
by_state <- by_state %>% summarise(
population = mean(population),
per_capita_income = mean(per_capita_income),
poverty_count = mean(poverty_count),
household_income = mean(household_income),
bachelors_degree = mean(bachelors_degree_or_higher_2015_19)
)
by_state
by_state <- combined_df %>% group_by(state)
by_state <- by_state %>% summarise(
population = mean(population),
per_capita_income = mean(per_capita_income),
poverty_count = mean(poverty_count),
bachelors_degree = mean(bachelors_degree_or_higher_2015_19)
)
by_state
usa_1 <- ggplot(data = by_state) +
geom_sf()
usa_2 <- ggplot(data = by_state) +
geom_sf(aes(fill = population)) +
ggtitle(label = "USA Population", subtitle = "population")
usa_1 / usa_2
usa_1 <- ggplot(data = by_state) +
geom_sf()
usa_2 <- ggplot(data = by_state) +
geom_sf(aes(fill = per_capita_income)) +
ggtitle(label = "USA Population", subtitle = "population")
usa_1 / usa_2
usa_2 <- ggplot(data = by_state) +
geom_sf(aes(fill = per_capita_income)) +
ggtitle(label = "USA Population", subtitle = "population")
usa_2
library(ggplot2)
ggplot(by_state, aes(fill=state, y=bachelors_degree, x=state)) +
geom_bar(position='dodge', stat='identity',
color = "black", width = 0.60)
by_state %>% slice(which.max(bachelors_degree))
by_state %>%
ggplot(aes(x=poverty_count,
y=bachelors_degree,
color=state))+
geom_point()+
geom_smooth(method="lm")
ggsave("add_regression_line_per_state_to_scatterplot_ggplot2.png")
by_state %>%
ggplot(aes(x=poverty_count,
y=bachelors_degree,
color=state))+
geom_point()+
geom_smooth(method="lm",se = FALSE)
ggsave("add_regression_line_per_state_to_scatterplot_ggplot2.png")
# We can that
by_state %>%
ggplot(aes(x=poverty_count,
y=bachelors_degree,
color=state))+
geom_point()+
geom_smooth(method="lm",se = FALSE)
ggsave("add_regression_line_per_state_to_scatterplot_ggplot2.png")
#state <- ggplot(by_state, aes(poverty_count)) +
#geom_line(aes(y = population), color = "red") +
#geom_line(aes(y = household_income), color = "green") +
#geom_line(aes(y = median_age), color = "blue") +
#geom_line(aes(y = bachelors_degree), color = "purple")
#state
# Plot
by_state %>%
ggplot( aes(x=household_income, y=poverty_count, group=state, color=state)) +
geom_line() +
scale_color_viridis(discrete = TRUE) +
ggtitle("Popularity of American names in the previous 30 years") +
theme_ipsum() +
ylab("Number of babies born")
library(tidytext)
library(tidytext)
install.packages("tidytext")
library(tidytext)
library(dplyr)
library(tidytext)
text_df %>%
unnest_tokens(word, text)
text <- c("Because I could not stop for Death -",
"He kindly stopped for me -",
"The Carriage held but just Ourselves -",
"and Immortality")
library(tidytext)
library(dplyr)
text <- c("Because I could not stop for Death -",
"He kindly stopped for me -",
"The Carriage held but just Ourselves -",
"and Immortality")
library(dplyr)
text_df <- tibble(line = 1:4, text = text)
library(dplyr)
text_df <- tibble(line = 1:4, text = text)
text_df
library(tidytext)
text_df %>%
unnest_tokens(word, text)
library(janeaustenr)
library(dplyr)
library(stringr)
original_books <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text,
regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup()
library(janeaustenr)
library(dplyr)
library(stringr)
original_books <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text,
regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%  ungroup()
original_books
library(tidytext)
tidy_books <- original_books %>%
unnest_tokens(word, text)
tidy_books
data(stop_words)
tidy_books <- tidy_books %>%
anti_join(stop_words)
data(stop_words)
tidy_books <- tidy_books %>%
anti_join(stop_words)
tidy_books
tidy_books %>%
count(word, sort = TRUE)
library(ggplot2)
tidy_books %>%
count(word, sort = TRUE) %>%
filter(n > 600) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word)) +
geom_col() +
labs(y = NULL)
library(gutenbergr)
library(gutenbergr)
install.packages("janeaustenr")
install.packages("gutenbergr")
install.packages("gutenbergr")
library(gutenbergr)
hgwells <- gutenberg_download(c(35, 36, 5230, 159))
hgwells
tidy_hgwells <- hgwells %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
library(gutenbergr)
hgwells <- gutenberg_download(c(35, 36, 5230, 159))
hgwells
tidy_hgwells <- hgwells %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
tidy_hgwells <- hgwells %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
tidy_hgwells <- hgwells %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
library(gutenbergr)
hgwells <- gutenberg_download(c(35, 36, 5230, 159))
hgwells
tidy_hgwells <- hgwells %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
library(gutenbergr)
hgwells <- gutenberg_download(c(35, 36, 5230, 159))
hgwells
tidy_hgwells <- hgwells %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
tidy_hgwells <- hgwells %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
library(tidytext)
library(dplyr)
text <- c("Because I could not stop for Death -",
"He kindly stopped for me -",
"The Carriage held but just Ourselves -",
"and Immortality")
library(dplyr)
text_df <- tibble(line = 1:4, text = text)
text_df
library(tidytext)
text_df %>%
unnest_tokens(word, text)
library(janeaustenr)
library(dplyr)
library(stringr)
original_books <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text,
regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%  ungroup()
original_books
library(tidytext)
tidy_books <- original_books %>%
unnest_tokens(word, text)
tidy_books
data(stop_words)
tidy_books <- tidy_books %>%
anti_join(stop_words)
tidy_books
tidy_books %>%
count(word, sort = TRUE)
library(ggplot2)
tidy_books %>%
count(word, sort = TRUE) %>%
filter(n > 600) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word)) +
geom_col() +
labs(y = NULL)
library(gutenbergr)
hgwells <- gutenberg_download(c(35, 36, 5230, 159))
hgwells
tidy_hgwells <- hgwells %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
tidy_hgwells %>%
count(word, sort = TRUE)
bronte <- gutenberg_download(c(1260, 768, 969, 9182, 767))
tidy_bronte <- bronte %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
tidy_bronte %>%
count(word, sort = TRUE)
#> # A tibble: 23,051 × 2
#>    word       n
#>    <chr>  <int>
#>  1 time    1065
#>  2 miss     855
#>  3 day      827
#>  4 hand     768
#>  5 eyes     713
#>  6 night    647
#>  7 heart    638
#>  8 looked   602
#>  9 door     592
#> 10 half     586
#> # … with 23,041 more rows
tidy_bronte %>%
count(word, sort = TRUE)
library(tidyr)
frequency <- bind_rows(mutate(tidy_bronte, author = "Brontë Sisters"),
mutate(tidy_hgwells, author = "H.G. Wells"),
mutate(tidy_books, author = "Jane Austen")) %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(author, word) %>%
group_by(author) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
pivot_wider(names_from = author, values_from = proportion) %>%
pivot_longer(`Brontë Sisters`:`H.G. Wells`,
names_to = "author", values_to = "proportion")
frequency
library(scales)
# expect a warning about rows with missing values being removed
ggplot(frequency, aes(x = proportion, y = `Jane Austen`,
color = abs(`Jane Austen` - proportion))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001),
low = "darkslategray4", high = "gray75") +
facet_wrap(~author, ncol = 2) +
theme(legend.position="none") +
labs(y = "Jane Austen", x = NULL)
cor.test(data = frequency[frequency$author == "Brontë Sisters",],
~ proportion + `Jane Austen`)
cor.test(data = frequency[frequency$author == "H.G. Wells",],
~ proportion + `Jane Austen`)
library(tidytext)
get_sentiments("afinn")
install.packages(c("backports", "BH", "blob", "brew", "brio", "broom", "cachem", "cli", "clipr", "colorspace", "commonmark", "cpp11", "crayon", "credentials", "data.table", "desc", "diffobj", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fs", "generics", "gert", "glue", "googlesheets4", "haven", "hms", "htmlwidgets", "igraph", "knitr", "later", "lifecycle", "lubridate", "magrittr", "memoise", "mime", "openintro", "openssl", "pillar", "pkgbuild", "pkgload", "PKI", "plyr", "processx", "psych", "R6", "rcmdcheck", "RColorBrewer", "Rcpp", "RcppEigen", "RCurl", "readr", "readxl", "remotes", "reprex", "rgdal", "rlang", "rmarkdown", "roxygen2", "rprojroot", "sass", "sessioninfo", "stringi", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "utf8", "uuid", "vctrs", "waldo", "withr", "xfun", "xml2", "yaml"))
library(tidytext)
install.packages(c("backports", "BH", "blob", "brew", "brio", "broom", "cachem", "cli", "clipr", "colorspace", "commonmark", "cpp11", "crayon", "credentials", "data.table", "desc", "diffobj", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fs", "generics", "gert", "glue", "googlesheets4", "haven", "hms", "htmlwidgets", "igraph", "knitr", "later", "lifecycle", "lubridate", "magrittr", "memoise", "mime", "openintro", "openssl", "pillar", "pkgbuild", "pkgload", "PKI", "plyr", "processx", "psych", "R6", "rcmdcheck", "RColorBrewer", "Rcpp", "RcppEigen", "RCurl", "readr", "readxl", "remotes", "reprex", "rgdal", "rlang", "rmarkdown", "roxygen2", "rprojroot", "sass", "sessioninfo", "stringi", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "utf8", "uuid", "vctrs", "waldo", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BH", "blob", "brew", "brio", "broom", "cachem", "cli", "clipr", "colorspace", "commonmark", "cpp11", "crayon", "credentials", "data.table", "desc", "diffobj", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fs", "generics", "gert", "glue", "googlesheets4", "haven", "hms", "htmlwidgets", "igraph", "knitr", "later", "lifecycle", "lubridate", "magrittr", "memoise", "mime", "openintro", "openssl", "pillar", "pkgbuild", "pkgload", "PKI", "plyr", "processx", "psych", "R6", "rcmdcheck", "RColorBrewer", "Rcpp", "RcppEigen", "RCurl", "readr", "readxl", "remotes", "reprex", "rgdal", "rlang", "rmarkdown", "roxygen2", "rprojroot", "sass", "sessioninfo", "stringi", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "utf8", "uuid", "vctrs", "waldo", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BH", "blob", "brew", "brio", "broom", "cachem", "cli", "clipr", "colorspace", "commonmark", "cpp11", "crayon", "credentials", "data.table", "desc", "diffobj", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fs", "generics", "gert", "glue", "googlesheets4", "haven", "hms", "htmlwidgets", "igraph", "knitr", "later", "lifecycle", "lubridate", "magrittr", "memoise", "mime", "openintro", "openssl", "pillar", "pkgbuild", "pkgload", "PKI", "plyr", "processx", "psych", "R6", "rcmdcheck", "RColorBrewer", "Rcpp", "RcppEigen", "RCurl", "readr", "readxl", "remotes", "reprex", "rgdal", "rlang", "rmarkdown", "roxygen2", "rprojroot", "sass", "sessioninfo", "stringi", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "utf8", "uuid", "vctrs", "waldo", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BH", "blob", "brew", "brio", "broom", "cachem", "cli", "clipr", "colorspace", "commonmark", "cpp11", "crayon", "credentials", "data.table", "desc", "diffobj", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fs", "generics", "gert", "glue", "googlesheets4", "haven", "hms", "htmlwidgets", "igraph", "knitr", "later", "lifecycle", "lubridate", "magrittr", "memoise", "mime", "openintro", "openssl", "pillar", "pkgbuild", "pkgload", "PKI", "plyr", "processx", "psych", "R6", "rcmdcheck", "RColorBrewer", "Rcpp", "RcppEigen", "RCurl", "readr", "readxl", "remotes", "reprex", "rgdal", "rlang", "rmarkdown", "roxygen2", "rprojroot", "sass", "sessioninfo", "stringi", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "utf8", "uuid", "vctrs", "waldo", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BH", "blob", "brew", "brio", "broom", "cachem", "cli", "clipr", "colorspace", "commonmark", "cpp11", "crayon", "credentials", "data.table", "desc", "diffobj", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fs", "generics", "gert", "glue", "googlesheets4", "haven", "hms", "htmlwidgets", "igraph", "knitr", "later", "lifecycle", "lubridate", "magrittr", "memoise", "mime", "openintro", "openssl", "pillar", "pkgbuild", "pkgload", "PKI", "plyr", "processx", "psych", "R6", "rcmdcheck", "RColorBrewer", "Rcpp", "RcppEigen", "RCurl", "readr", "readxl", "remotes", "reprex", "rgdal", "rlang", "rmarkdown", "roxygen2", "rprojroot", "sass", "sessioninfo", "stringi", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "utf8", "uuid", "vctrs", "waldo", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BH", "blob", "brew", "brio", "broom", "cachem", "cli", "clipr", "colorspace", "commonmark", "cpp11", "crayon", "credentials", "data.table", "desc", "diffobj", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fs", "generics", "gert", "glue", "googlesheets4", "haven", "hms", "htmlwidgets", "igraph", "knitr", "later", "lifecycle", "lubridate", "magrittr", "memoise", "mime", "openintro", "openssl", "pillar", "pkgbuild", "pkgload", "PKI", "plyr", "processx", "psych", "R6", "rcmdcheck", "RColorBrewer", "Rcpp", "RcppEigen", "RCurl", "readr", "readxl", "remotes", "reprex", "rgdal", "rlang", "rmarkdown", "roxygen2", "rprojroot", "sass", "sessioninfo", "stringi", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "utf8", "uuid", "vctrs", "waldo", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BH", "blob", "brew", "brio", "broom", "cachem", "cli", "clipr", "colorspace", "commonmark", "cpp11", "crayon", "credentials", "data.table", "desc", "diffobj", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fs", "generics", "gert", "glue", "googlesheets4", "haven", "hms", "htmlwidgets", "igraph", "knitr", "later", "lifecycle", "lubridate", "magrittr", "memoise", "mime", "openintro", "openssl", "pillar", "pkgbuild", "pkgload", "PKI", "plyr", "processx", "psych", "R6", "rcmdcheck", "RColorBrewer", "Rcpp", "RcppEigen", "RCurl", "readr", "readxl", "remotes", "reprex", "rgdal", "rlang", "rmarkdown", "roxygen2", "rprojroot", "sass", "sessioninfo", "stringi", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "utf8", "uuid", "vctrs", "waldo", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BH", "blob", "brew", "brio", "broom", "cachem", "cli", "clipr", "colorspace", "commonmark", "cpp11", "crayon", "credentials", "data.table", "desc", "diffobj", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fs", "generics", "gert", "glue", "googlesheets4", "haven", "hms", "htmlwidgets", "igraph", "knitr", "later", "lifecycle", "lubridate", "magrittr", "memoise", "mime", "openintro", "openssl", "pillar", "pkgbuild", "pkgload", "PKI", "plyr", "processx", "psych", "R6", "rcmdcheck", "RColorBrewer", "Rcpp", "RcppEigen", "RCurl", "readr", "readxl", "remotes", "reprex", "rgdal", "rlang", "rmarkdown", "roxygen2", "rprojroot", "sass", "sessioninfo", "stringi", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "utf8", "uuid", "vctrs", "waldo", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BH", "blob", "brew", "brio", "broom", "cachem", "cli", "clipr", "colorspace", "commonmark", "cpp11", "crayon", "credentials", "data.table", "desc", "diffobj", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fs", "generics", "gert", "glue", "googlesheets4", "haven", "hms", "htmlwidgets", "igraph", "knitr", "later", "lifecycle", "lubridate", "magrittr", "memoise", "mime", "openintro", "openssl", "pillar", "pkgbuild", "pkgload", "PKI", "plyr", "processx", "psych", "R6", "rcmdcheck", "RColorBrewer", "Rcpp", "RcppEigen", "RCurl", "readr", "readxl", "remotes", "reprex", "rgdal", "rlang", "rmarkdown", "roxygen2", "rprojroot", "sass", "sessioninfo", "stringi", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "utf8", "uuid", "vctrs", "waldo", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BH", "blob", "brew", "brio", "broom", "cachem", "cli", "clipr", "colorspace", "commonmark", "cpp11", "crayon", "credentials", "data.table", "desc", "diffobj", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fs", "generics", "gert", "glue", "googlesheets4", "haven", "hms", "htmlwidgets", "igraph", "knitr", "later", "lifecycle", "lubridate", "magrittr", "memoise", "mime", "openintro", "openssl", "pillar", "pkgbuild", "pkgload", "PKI", "plyr", "processx", "psych", "R6", "rcmdcheck", "RColorBrewer", "Rcpp", "RcppEigen", "RCurl", "readr", "readxl", "remotes", "reprex", "rgdal", "rlang", "rmarkdown", "roxygen2", "rprojroot", "sass", "sessioninfo", "stringi", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "utf8", "uuid", "vctrs", "waldo", "withr", "xfun", "xml2", "yaml"))
library(tidytext)
library(tidytext)
get_sentiments("afinn")
