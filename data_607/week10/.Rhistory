combined_df <- combined_df %>%            # Apply select & one_of functions
select(- one_of(col_remove))
combined_df
combined_df <- rename(combined_df, state = state.x)
combined_df
ggplot(df, aes(fill=state, y=education, x=per_capita_income)) +
geom_bar(position='dodge', stat='identity')
ggplot(combined_df, aes(fill=state, y=education, x=per_capita_income)) +
geom_bar(position='dodge', stat='identity')
ggplot(combined_df, aes(fill=state, y=education, x=state)) +
geom_bar(position='dodge', stat='identity')
library(ggplot2)
ggplot(combined_df, aes(fill=state, y=education, x=state)) +
geom_bar(position='dodge', stat='identity')
data2_al <- dataset2_alabama %>%
pivot_longer(cols = c(2:8),
names_to = "Variable",
values_to = "Value")
data2_al
bar_plot <- ggplot(data = data1_al, aes(x = Variable, y = Value, fill = Variable)) +
geom_bar(stat = "identity") + coord_flip() +
labs(
x = "Variables",
y = "Values",
title = paste(
"Census data for Alabama"
)
)
bar_plot
summary(combined_df)
# Get Maximum value of the column by column name
max(combined_df$per_capita_income)
# First filter the state Alabama and selecting the columns
new_df <- combined_df %>% filter(max(combined_df$per_capita_income)) %>%
select(c(3, 4, 5, 6, 7, 8, 9, 10))
# First filter the state Alabama and selecting the columns
new_df <- combined_df %>% max(combined_df$per_capita_income) %>%
select(c(3, 4, 5, 6, 7, 8, 9, 10))
# First filter the state Alabama and selecting the columns
dataset <- dataset2 %>% filter(per_capita_income == max(combined_df$per_capita_income)) %>%
select(c(3, 4, 5, 6, 7, 8, 9, 10))
# First filter the state Alabama and selecting the columns
dataset <- combined_df %>% filter(per_capita_income == max(combined_df$per_capita_income)) %>%
select(c(3, 4, 5, 6, 7, 8, 9, 10))
dataset
distinct(combined_df)
summary(combined_df)
# Get Maximum value of the column by column name
max(combined_df$per_capita_income)
# First filter the state Alabama and selecting the columns
dataset <- combined_df %>% filter(per_capita_income == max(combined_df$per_capita_income)) %>%
select(c(3, 4, 5, 6, 7, 8, 9, 10))
dataset
joint_df <- dataset2 %>% inner_join(dataset3,by="county")
joint_df
#combined_df<- merge(dataset1, joint_df, by = 'county', all.x= TRUE)
combined_df = dataset1 %>% inner_join(joint_df,by="county")
combined_df
col_remove <- c("state.y", "fips")     # Define columns that should be dropped
combined_df <- combined_df %>%            # Apply select & one_of functions
select(- one_of(col_remove))
combined_df
combined_df <- combined_df %>%            # Apply select & one_of functions
select(- one_of(col_remove))
combined_df
combined_df <- rename(combined_df, state = state.x)
combined_df
distinct(combined_df)
summary(combined_df)
# Get Maximum value of the column by column name
max(combined_df$per_capita_income)
# First filter the state Alabama and selecting the columns
dataset <- combined_df %>% filter(per_capita_income == max(combined_df$per_capita_income)) %>%
select(c(3, 4, 5, 6, 7, 8, 9, 10))
dataset
combined_df[!duplicated(combined_df[,c('county')]),]
combined_df <- combined_df[!duplicated(combined_df[,c('county')]),]
combined_df
summary(combined_df)
# Get Maximum value of the column by column name
max(combined_df$per_capita_income)
# First filter the state Alabama and selecting the columns
dataset <- combined_df %>% filter(per_capita_income == max(combined_df$per_capita_income)) %>%
select(c(3, 4, 5, 6, 7, 8, 9, 10))
dataset
# First filter the state Alabama and selecting the columns
new_df <- combined_df %>% filter(per_capita_income == max(combined_df$per_capita_income)) %>%
select(c(3, 4, 5, 6, 7, 8, 9, 10))
new_df
summary(combined_df)
# First filter the state Alabama and selecting the columns
new_df <- combined_df %>% filter(per_capita_income == max(combined_df$per_capita_income)) %>%
select(c(1, 3, 4, 5, 6, 7, 8, 9, 16))
new_df
# Transform the table from wide form to long form
ny_data <- new_df %>%
pivot_longer(cols = c(2:9),
names_to = "Variable",
values_to = "Value")
combined_df <- combined_df %>% relocate(state, .before = population)
combined_df <- combined_df %>% relocate(state, .before = population)
combined_df
# First filter the state and selecting the columns
new_df <- combined_df %>% filter(per_capita_income == max(combined_df$per_capita_income)) %>%
select(c(1, 3, 4, 5, 6, 7, 8, 9, 16))
new_df
# Transform the table from wide form to long form
ny_data <- new_df %>%
pivot_longer(cols = c(2:9),
names_to = "Variable",
values_to = "Value")
# First filter the state and selecting the columns
new_df <- combined_df %>% filter(per_capita_income == max(combined_df$per_capita_income)) %>%
select(c(1, 4, 5, 6, 7, 8, 9, 16))
new_df
# Transform the table from wide form to long form
ny_data <- new_df %>%
pivot_longer(cols = c(2:9),
names_to = "Variable",
values_to = "Value")
# Transform the table from wide form to long form
ny_data <- new_df %>%
pivot_longer(cols = c(2:8),
names_to = "Variable",
values_to = "Value")
data2_al
# Transform the table from wide form to long form
ny_data <- new_df %>%
pivot_longer(cols = c(2:8),
names_to = "Variable",
values_to = "Value")
ny_data
bar_plot <- ggplot(data = ny_data, aes(x = Variable, y = Value, fill = Variable)) +
geom_bar(stat = "identity") + coord_flip() +
labs(
x = "Variables",
y = "Values",
title = paste(
"Census data for Alabama"
)
)
bar_plot
# First filter the state and selecting the columns
new_df <- combined_df %>% filter(per_capita_income == max(combined_df$per_capita_income)) %>%
select(c(1, 6, 7, 8, 9, 16))
new_df
# Transform the table from wide form to long form
ny_data <- new_df %>%
pivot_longer(cols = c(2:8),
names_to = "Variable",
values_to = "Value")
# Transform the table from wide form to long form
ny_data <- new_df %>%
pivot_longer(cols = c(2:6),
names_to = "Variable",
values_to = "Value")
ny_data
bar_plot <- ggplot(data = ny_data, aes(x = Variable, y = Value, fill = Variable)) +
geom_bar(stat = "identity") + coord_flip() +
labs(
x = "Variables",
y = "Values",
title = paste(
"Census data for Alabama"
)
)
bar_plot
bar_plot <- ggplot(data = ny_data, aes(x = Variable, y = Value, fill = Variable)) +
geom_bar(stat = "identity") + coord_flip() +
labs(
x = "Variables",
y = "Values",
title = paste(
"Census data for New york"
)
)
bar_plot
p <- ggplot(data = ny_data, aes(x = Variable, y = Value)) +
geom_bar(stat = "identity") + coord_flip()
p
# Transform the table from wide form to long form
ny_data <- new_df %>%
pivot_longer(cols = c(2:6),
names_to = "Variable",
values_to = "Value"/100000)
# Transform the table from wide form to long form
ny_data <- new_df %>%
pivot_longer(cols = c(2:6),
names_to = "Variable",
values_to = "Value")
ny_data
by_state <- combined_df %>% group_by(state)
by_state <- combined_df %>% group_by(state)
by_state %>% summarise(
disp = mean(median_age),
hp = mean(per_capita_income)
)
by_state <- combined_df %>% group_by(state)
by_state %>% summarise(
median_age = mean(median_age),
per_capita_income = mean(per_capita_income),
poverty_count = mean(poverty_count)
)
by_state <- combined_df %>% group_by(state)
by_state %>% summarise(
median_age = mean(median_age),
per_capita_income = mean(per_capita_income),
poverty_count = mean(poverty_count),
education = mean(bachelors_degree_or_higher_2015_19)
)
by_state <- combined_df %>% group_by(state)
by_state %>% summarise(
median_age = mean(median_age),
per_capita_income = mean(per_capita_income),
poverty_count = mean(poverty_count),
bachelors_degree = mean(bachelors_degree_or_higher_2015_19)
)
ggplot(mpg, aes(poverty_count, bachelors_degree)) +
geom_point(aes(color = state)) +
geom_smooth(se = FALSE) +
labs(title = "Fuel efficiency generally decreases with engine size")
ggplot(mpg, aes(poverty_count, bachelors_degree)) +
geom_point(aes(color = class())) +
geom_smooth(se = FALSE) +
labs(title = "Fuel efficiency generally decreases with engine size")
ggplot(mpg, aes(poverty_count, bachelors_degree)) +
geom_point(aes(color = class) +
geom_smooth(se = FALSE) +
labs(title = "Fuel efficiency generally decreases with engine size")
ggplot(mpg, aes(poverty_count, bachelors_degree)) +
geom_point(aes(color = class)) +
geom_smooth(se = FALSE) +
labs(title = "Fuel efficiency generally decreases with engine size")
by_state <- combined_df %>% group_by(state)
by_state <- by_state %>% summarise(
median_age = mean(median_age),
per_capita_income = mean(per_capita_income),
poverty_count = mean(poverty_count),
bachelors_degree = mean(bachelors_degree_or_higher_2015_19)
)
ggplot(by_state, aes(poverty_count, bachelors_degree)) +
geom_point(aes(color = class)) +
geom_smooth(se = FALSE) +
labs(title = "Fuel efficiency generally decreases with engine size")
by_state <- combined_df %>% group_by(state)
by_state <- by_state %>% summarise(
median_age = mean(median_age),
per_capita_income = mean(per_capita_income),
poverty_count = mean(poverty_count),
bachelors_degree = mean(bachelors_degree_or_higher_2015_19)
)
by_state
ggplot(by_state, aes(state, bachelors_degree)) +
geom_point(aes(color = class)) +
geom_smooth(se = FALSE) +
labs(title = "Fuel efficiency generally decreases with engine size")
ggplot(by_state, aes(poverty_count, bachelors_degree)) +
geom_point(aes(color = class)) +
geom_smooth(se = FALSE) +
labs(title = "Fuel efficiency generally decreases with engine size")
ggplot(mpg, aes(state, per_capita_income)) +
geom_bar(stat = "summary", fun.y = "mean")  +
ylab('state per Capita income')
ggplot(by_state, aes(state, per_capita_income)) +
geom_bar(state = "summary", fun.y = "mean")  +
ylab('state per Capita income')
library(tidyverse)
library(tidyr)
library(dplyr)
library(ggplot2)
ggplot(by_state, aes(fill=state, y=poverty_count, x=state)) +
geom_bar(position='dodge', stat='identity')
plot(state, per_capita_income, type = "l")                                 # Basic line plot in R
plot(by_state, per_capita_income, type = "l")                                 # Basic line plot in R
plot(poverty_count, per_capita_income, type = "l")                                 # Basic line plot in R
by_state <- combined_df %>% group_by(state)
by_state <- by_state %>% summarise(
median_age = mean(median_age),
per_capita_income = mean(per_capita_income),
poverty_count = mean(poverty_count),
household_income = mean(household_income),
bachelors_degree = mean(bachelors_degree_or_higher_2015_19)
)
by_state
ggplot(by_state, aes(fill=state, y=poverty_count, x=state)) +
geom_bar(position='dodge', stat='identity')
state <- ggplot(by_state, aes(x)) +
geom_line(aes(y = poverty_count), color = "black") +
geom_line(aes(y = per_capita_income), color = "red") +
geom_line(aes(y = unemployment_rate), color = "green") +
geom_line(aes(y = median_age), color = "blue") +
geom_line(aes(y = bachelors_degree), color = "purple")
gfg_plot                              # Basic line plot in R
state <- ggplot(by_state, aes(x)) +
geom_line(aes(y = poverty_count), color = "black") +
geom_line(aes(y = per_capita_income), color = "red") +
geom_line(aes(y = household_income), color = "green") +
geom_line(aes(y = median_age), color = "blue") +
geom_line(aes(y = bachelors_degree), color = "purple")
state                              # Basic line plot in R
by_state <- combined_df %>% group_by(state)
by_state <- by_state %>% summarise(
median_age = mean(median_age),
per_capita_income = mean(per_capita_income),
poverty_count = mean(poverty_count),
household_income = mean(household_income),
bachelors_degree = mean(bachelors_degree_or_higher_2015_19)
)
by_state
state <- ggplot(by_state, aes(poverty_count)) +
geom_line(aes(y = per_capita_income), color = "red") +
geom_line(aes(y = household_income), color = "green") +
geom_line(aes(y = median_age), color = "blue") +
geom_line(aes(y = bachelors_degree), color = "purple")
state                              # Basic line plot in R
by_state <- combined_df %>% group_by(state)
by_state <- by_state %>% summarise(
population = mean(population)
median_age = mean(median_age),
by_state <- combined_df %>% group_by(state)
by_state <- by_state %>% summarise(
population = mean(population),
median_age = mean(median_age),
per_capita_income = mean(per_capita_income),
poverty_count = mean(poverty_count),
household_income = mean(household_income),
bachelors_degree = mean(bachelors_degree_or_higher_2015_19)
)
by_state
state <- ggplot(by_state, aes(poverty_count)) +
geom_line(aes(y = population), color = "red") +
geom_line(aes(y = household_income), color = "green") +
geom_line(aes(y = median_age), color = "blue") +
geom_line(aes(y = bachelors_degree), color = "purple")
state                              # Basic line plot in R
state <- ggplot(by_state, aes(poverty_count)) +
geom_line(aes(y = population), color = "red") +
geom_line(aes(y = household_income), color = "green") +
geom_line(aes(y = median_age), color = "blue") +
geom_line(aes(y = bachelors_degree), color = "purple")+
geom_bar(position='dodge', stat='identity')
state
state <- ggplot(by_state, aes(poverty_count)) +
geom_line(aes(y = population), color = "red") +
geom_line(aes(y = household_income), color = "green") +
geom_line(aes(y = median_age), color = "blue") +
geom_line(aes(y = bachelors_degree), color = "purple")
state
library(tidytext)
library(dplyr)
get_sentiments("afinn")
install.packages(c("backports", "BH", "blob", "brew", "brio", "broom", "cachem", "cli", "clipr", "colorspace", "commonmark", "cpp11", "crayon", "credentials", "data.table", "desc", "diffobj", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fs", "generics", "gert", "glue", "googlesheets4", "haven", "hms", "htmlwidgets", "igraph", "knitr", "later", "lifecycle", "lubridate", "magrittr", "memoise", "mime", "openintro", "openssl", "pillar", "pkgbuild", "pkgload", "PKI", "plyr", "processx", "psych", "R6", "rcmdcheck", "RColorBrewer", "Rcpp", "RcppEigen", "RCurl", "readr", "readxl", "remotes", "reprex", "rgdal", "rlang", "rmarkdown", "roxygen2", "rprojroot", "sass", "sessioninfo", "stringi", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "utf8", "uuid", "vctrs", "waldo", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BH", "blob", "brew", "brio", "broom", "cachem", "cli", "clipr", "colorspace", "commonmark", "cpp11", "crayon", "credentials", "data.table", "desc", "diffobj", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fs", "generics", "gert", "glue", "googlesheets4", "haven", "hms", "htmlwidgets", "igraph", "knitr", "later", "lifecycle", "lubridate", "magrittr", "memoise", "mime", "openintro", "openssl", "pillar", "pkgbuild", "pkgload", "PKI", "plyr", "processx", "psych", "R6", "rcmdcheck", "RColorBrewer", "Rcpp", "RcppEigen", "RCurl", "readr", "readxl", "remotes", "reprex", "rgdal", "rlang", "rmarkdown", "roxygen2", "rprojroot", "sass", "sessioninfo", "stringi", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "utf8", "uuid", "vctrs", "waldo", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BH", "blob", "brew", "brio", "broom", "cachem", "cli", "clipr", "colorspace", "commonmark", "cpp11", "crayon", "credentials", "data.table", "desc", "diffobj", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fs", "generics", "gert", "glue", "googlesheets4", "haven", "hms", "htmlwidgets", "igraph", "knitr", "later", "lifecycle", "lubridate", "magrittr", "memoise", "mime", "openintro", "openssl", "pillar", "pkgbuild", "pkgload", "PKI", "plyr", "processx", "psych", "R6", "rcmdcheck", "RColorBrewer", "Rcpp", "RcppEigen", "RCurl", "readr", "readxl", "remotes", "reprex", "rgdal", "rlang", "rmarkdown", "roxygen2", "rprojroot", "sass", "sessioninfo", "stringi", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "utf8", "uuid", "vctrs", "waldo", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BH", "blob", "brew", "brio", "broom", "cachem", "cli", "clipr", "colorspace", "commonmark", "cpp11", "crayon", "credentials", "data.table", "desc", "diffobj", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fs", "generics", "gert", "glue", "googlesheets4", "haven", "hms", "htmlwidgets", "igraph", "knitr", "later", "lifecycle", "lubridate", "magrittr", "memoise", "mime", "openintro", "openssl", "pillar", "pkgbuild", "pkgload", "PKI", "plyr", "processx", "psych", "R6", "rcmdcheck", "RColorBrewer", "Rcpp", "RcppEigen", "RCurl", "readr", "readxl", "remotes", "reprex", "rgdal", "rlang", "rmarkdown", "roxygen2", "rprojroot", "sass", "sessioninfo", "stringi", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "utf8", "uuid", "vctrs", "waldo", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BH", "blob", "brew", "brio", "broom", "cachem", "cli", "clipr", "colorspace", "commonmark", "cpp11", "crayon", "credentials", "data.table", "desc", "diffobj", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fs", "generics", "gert", "glue", "googlesheets4", "haven", "hms", "htmlwidgets", "igraph", "knitr", "later", "lifecycle", "lubridate", "magrittr", "memoise", "mime", "openintro", "openssl", "pillar", "pkgbuild", "pkgload", "PKI", "plyr", "processx", "psych", "R6", "rcmdcheck", "RColorBrewer", "Rcpp", "RcppEigen", "RCurl", "readr", "readxl", "remotes", "reprex", "rgdal", "rlang", "rmarkdown", "roxygen2", "rprojroot", "sass", "sessioninfo", "stringi", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "utf8", "uuid", "vctrs", "waldo", "withr", "xfun", "xml2", "yaml"))
install.packages("textdata")
get_sentiments("afinn")
library(tidytext)
library(dplyr)
get_sentiments("afinn")
get_sentiments("afinn")
Sentiments
get_sentiments("bing")
get_sentiments("nrc")
install.packages("textdata")
get_sentiments("nrc")
library(tidytext)
library(dplyr)
get_sentiments("afinn")
get_sentiments("bing")
get_sentiments("nrc")
library(janeaustenr)
library(dplyr)
library(stringr)
tidy_books <- austen_books() %>%
group_by(book) %>%
mutate(
linenumber = row_number(),
chapter = cumsum(str_detect(text,
regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup() %>%
unnest_tokens(word, text)
library(janeaustenr)
library(dplyr)
library(stringr)
tidy_books <- austen_books() %>%
group_by(book) %>%
mutate(
linenumber = row_number(),
chapter = cumsum(str_detect(text,
regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>% ungroup() %>%
unnest_tokens(word, text)
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tidy_books %>%
filter(book == "Emma") %>%
inner_join(nrc_joy) %>%
count(word, sort = TRUE)
library(tidyr)
jane_austen_sentiment <- tidy_books %>%
inner_join(get_sentiments("bing")) %>%
count(book, index = linenumber %/% 80, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
library(ggplot2)
ggplot(jane_austen_sentiment, aes(index, sentiment, fill = book)) +
geom_col(show.legend = FALSE) +
facet_wrap(~book, ncol = 2, scales = "free_x")
pride_prejudice <- tidy_books %>%
filter(book == "Pride & Prejudice")
pride_prejudice
afinn <- pride_prejudice %>%
inner_join(get_sentiments("afinn")) %>%
group_by(index = linenumber %/% 80) %>%
summarise(sentiment = sum(value)) %>%
mutate(method = "AFINN")
bing_and_nrc <- bind_rows(
pride_prejudice %>%
inner_join(get_sentiments("bing")) %>%
mutate(method = "Bing et al."),
pride_prejudice %>%
inner_join(get_sentiments("nrc") %>%
filter(sentiment %in% c("positive",
"negative"))
) %>%
mutate(method = "NRC")) %>%
count(method, index = linenumber %/% 80, sentiment) %>%
pivot_wider(names_from = sentiment,
values_from = n,
values_fill = 0) %>%
mutate(sentiment = positive - negative)
bind_rows(afinn,
bing_and_nrc) %>%
ggplot(aes(index, sentiment, fill = method)) +
geom_col(show.legend = FALSE) +
facet_wrap(~method, ncol = 1, scales = "free_y")
get_sentiments("nrc") %>%
filter(sentiment %in% c("positive", "negative")) %>%
count(sentiment)
get_sentiments("bing") %>%
count(sentiment)
bing_word_counts <- tidy_books %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
ungroup()
bing_word_counts
bing_word_counts %>%
group_by(sentiment) %>%
slice_max(n, n = 10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(x = "Contribution to sentiment",
y = NULL)
custom_stop_words <- bind_rows(tibble(word = c("miss"),
lexicon = c("custom")),
stop_words)
custom_stop_words
library(wordcloud)
install.packages("wordcloud")
library(wordcloud)
tidy_books %>%
anti_join(stop_words) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
install.packages("reshape2")
library(reshape2)
tidy_books %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("gray20", "gray80"),
max.words = 100)
p_and_p_sentences <- tibble(text = prideprejudice) %>%
unnest_tokens(sentence, text, token = "sentences")
p_and_p_sentences <- tibble(text = prideprejudice) %>%
unnest_tokens(sentence, text, token = "sentences")
p_and_p_sentences
p_and_p_sentences$sentence[2]
#> [1] "by jane austen"
austen_chapters <- austen_books() %>%
group_by(book) %>%
unnest_tokens(chapter, text, token = "regex",
pattern = "Chapter|CHAPTER [\\dIVXLC]") %>% ungroup()
austen_chapters %>%
group_by(book) %>%
summarise(chapters = n())
bingnegative <- get_sentiments("bing") %>%
filter(sentiment == "negative")
wordcounts <- tidy_books %>%
group_by(book, chapter) %>%
summarize(words = n())
tidy_books %>%
semi_join(bingnegative) %>%
group_by(book, chapter) %>%
summarize(negativewords = n()) %>%
left_join(wordcounts, by = c("book", "chapter")) %>%
mutate(ratio = negativewords/words) %>%
filter(chapter != 0) %>%
slice_max(ratio, n = 1) %>% ungroup()
library(tidytext)
Sentiments
install.packages("sentiments")
library(tidytext)
Sentiments
library(tidytext)
Sentiments
