}
}
attendence(students)
attendence <- function(class_students){
print(Sys.Date())
for (name in class_students){
print(substr(name,2,2))
second_letter <- substr(name,2,2)
if (second_letter == 'e'){
combination <- sample(33,3)
print(name)
print(combination)
}
}
}
attendence(students)
attendence <- function(class_students){
print(Sys.Date())
for (name in class_students){
print(substr(name,2,2))
second_letter <- substr(name,2,2)
if (second_letter == 'e'){
combination <- sample(33:66,3)
print(name)
print(combination)
}
}
}
attendence(students)
library(tidyverse)
data(diamonds, package='ggplot2')
slice(diamonds, 1:7)
slice(diamonds, 1:7)
filter(diamonds, cut=='Ideal')
total_volume <- mutate(diamonds, x * y * z)
total_volume
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
plot(pressure)
install.packages("plotly")
install.packages("crosstalk")
install.packages("DT")
install.packages("fivethirtyeight")
a <- 3
b <- 5
c <- 'Uzma'
d <- TRUE
e <- FALSE
a <- 3
b <- 5
c <- 'Uzma'
d <- TRUE
e <- FALSE
library(tidyverse)
install.packages("ggplot2")
?factorial
knitr::opts_chunk$set(echo = TRUE)
num <- readline('Enter the number for calculating factorial: ');
knitr::opts_chunk$set(echo = TRUE)
num <- as.numeric(readline('Enter number for calculating factorial: '))
num
typeof(num)
factorial <- num
factorial
typeof(factorial)
while (x < num) {
x <- x-1
factorial <- (x*factorial)
# print(factorial)
num <- num-1
}
x <- 0
while (x < num) {
x <- x-1
factorial <- (x*factorial)
# print(factorial)
num <- num-1
}
n <- 1
x <- num
while (n < num) {
x <- x-1
factorial <- (x*factorial)
# print(factorial)
n <- n+1
}
print(factorial)
num <- as.numeric(readline('Enter number for calculating factorial: '))
num
typeof(num)
factorial <- num
factorial
typeof(factorial)
n <- 1
typeof(n)
n <- 1
typeof(n)
n <- 1
x <- 1
n <- 1
typeof(n)
n <- 1
x <- 1
typeof(x)
while (n < num) {
x <- x-1
factorial <- (x*factorial)
# print(factorial)
n <- n+1
}
print(factorial)
n <- 1
typeof(n)
n <- 1
x <- num
typeof(x)
while (n < num) {
x <- x-1
factorial <- (x*factorial)
# print(factorial)
n <- n+1
}
print(factorial)
factorial <- num
factorial
typeof(factorial)
for (x in num:3) {
x <- x-1
factorial <- (x*factorial)
# print(factorial)
}
print(factorial)
num <- as.numeric(readline('Enter number for calculating factorial: '))
num
typeof(num)
factorial <- num
factorial
typeof(factorial)
n <- 1
typeof(n)
n <- 1
x <- num
typeof(x)
while (n < num) {
x <- x-1
factorial <- (x*factorial)
# print(factorial)
n <- n+1
}
print(factorial)
knitr::opts_chunk$set(echo = TRUE)
num <- as.numeric(readline('Enter number for calculating factorial: '))
num
typeof(num)
factorial <- num
factorial
typeof(factorial)
n <- 1
typeof(n)
n <- 1
x <- num
typeof(x)
while (n < num) {
x <- x-1
factorial <- (x*factorial)
# print(factorial)
n <- n+1
}
print(factorial)
while (n < num) {
x <- x-1
factorial <- (x*factorial)
# print(factorial)
n <- n+1
}
cat("factorial is: " factorial)
while (n < num) {
x <- x-1
factorial <- (x*factorial)
# print(factorial)
n <- n+1
}
print(factorial)
library(stringr)
cat('The ', df$num, 'factorial is: ', df$ factorial)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
num <- as.numeric(readline('Enter number for calculating factorial: '))
num
typeof(num)
factorial <- num
factorial
typeof(factorial)
for (x in num:3) {
x <- x-1
factorial <- (x*factorial)
# print(factorial)
}
print(factorial)
num <- as.numeric(readline('Enter number for calculating factorial: '))
num
typeof(num)
factorial <- num
factorial
typeof(factorial)
n <- 1
typeof(n)
n <- 1
x <- num
typeof(x)
while (n < num) {
x <- x-1
factorial <- (x*factorial)
# print(factorial)
n <- n+1
}
print(factorial)
knitr::opts_chunk$set(echo = TRUE)
num <- as.numeric(readline('Enter number for calculating sequence: '))
num
typeof(num)
last_num <- as.numeric(readline('Enter number for calculating sequence: '))
last_num
typeof(last_num)
i <- 1
while (first_num < last_num) {
numeric_vector[i] <- c(first_num)
first_num = first_num + 5
i <- i+1
}
first_num <- as.numeric(readline('Enter number for calculating sequence: '))
first_num
typeof(first_num)
last_num <- as.numeric(readline('Enter number for calculating sequence: '))
last_num
typeof(last_num)
i <- 1
while (first_num < last_num) {
numeric_vector[i] <- c(first_num)
first_num = first_num + 5
i <- i+1
}
i <- 1
numeric_vector <- vector()
while (first_num < last_num) {
numeric_vector[i] <- c(first_num)
first_num = first_num + 5
i <- i+1
}
print(numeric_vector)
first_num <- as.numeric(readline('Enter number for calculating sequence: '))
first_num
typeof(first_num)
last_num <- as.numeric(readline('Enter number for calculating sequence: '))
last_num
typeof(last_num)
i <- 1
numeric_vector <- vector()
while (first_num <= last_num) {
numeric_vector[i] <- c(first_num)
first_num = first_num + 5
i <- i+1
}
print(numeric_vector)
knitr::opts_chunk$set(echo = TRUE)
first_num <- as.numeric(readline('Enter the value of x: '))
first_num
typeof(first_num)
last_num <- as.numeric(readline('Enter the value of y: '))
last_num
typeof(last_num)
slope_yintercept <- function(x,y){
slope <- (y/x)
y_intercept <- (y-x*m)
print(slope)
print(y_intercept)
}
slope_yintercept(x,y)
x <- as.numeric(readline('Enter the value of x: '))
x
typeof(x)
y <- as.numeric(readline('Enter the value of y: '))
y
typeof(y)
slope_intercept <- function(x,y){
slope <- (y/x)
y_intercept <- (y-x*m)
print(slope)
print(y_intercept)
}
slope_intercept(x,y)
slope_intercept <- function(x,y){
slope <- (y/x)
y_intercept <- (y-x*slope)
print(slope)
print(y_intercept)
}
slope_intercept(x,y)
slope_intercept <- function(x,y){
slope <- (y/x)
y_intercept <- (y-x*slope)
return (slope, y_intercept)
}
slope_intercept(x,y)
slope_intercept <- function(x,y){
slope <- (y/x)
y_intercept <- (y-x*slope)
return (slope)
return(y_intercept)
}
slope_intercept(x,y)
print(slope)
slope_intercept <- function(x,y){
slope <- (y/x)
y_intercept <- (y-x*slope)
return (slope),
x <- as.numeric(readline('Enter the value of x: '))
x
typeof(x)
y <- as.numeric(readline('Enter the value of y: '))
y
typeof(y)
slope_intercept <- function(x,y){
slope <- (y/x)
y_intercept <- (y-x*slope)
return (slope)
return(y_intercept)
}
slope_intercept(x,y)
print(slope)
slope_intercept(x,y)
print(x)
print(y_intercept)
slope_intercept <- function(x,y){
slope <- (y/x)
y_intercept <- (y-x*slope)
print(slope)
print(y_intercept)
return (slope)
return(y_intercept)
}
slope_intercept(x,y)
print(slope)
slope_intercept <- function(x,y){
slope <- (y/x)
y_intercept <- (y-x*slope)
print(slope)
print(y_intercept)
return (slope)
return(y_intercept)
}
slope_intercept <- function(x,y){
slope <- (y/x)
y_intercept <- (y-x*slope)
# print(slope)
# print(y_intercept)
return (slope)
return(y_intercept)
}
slope_intercept(x,y)
# print(slope)
# print(y_intercept)
slope_intercept <- function(x,y){
slope <- (y/x)
y_intercept <- (y-x*slope)
print(slope)
print(y_intercept)
}
slope_intercept(x,y)
num <- as.numeric(readline('Enter number for calculating factorial: '))
num
typeof(num)
num <- as.numeric(readline('Enter number for calculating factorial: '))
num
typeof(num)
knitr::opts_chunk$set(echo = TRUE)
num <- as.numeric(readline('Enter number for calculating factorial: '))
num
typeof(num)
factorial <- num
factorial
typeof(factorial)
for x in num:1 {
for num in num:1 {
for x in num:1 {
x <- 0
for x in num:1 {
x <- 0
for (x in num:1) {
print(x)
}
for (x in num:1) {
print(x)
}
for (x in num:3) {
print(x)
x <- x-1
factorial <- factorial*x
}
print(factorial)
num <- as.numeric(readline('Enter number for calculating factorial: '))
num
typeof(num)
factorial <- num
factorial
typeof(factorial)
for (x in num:3) {
print(x)
x <- x-1
factorial <- factorial*x
}
print(factorial)
knitr::opts_chunk$set(echo = TRUE)
num <- as.numeric(readline('Enter number for calculating factorial: '))
num
typeof(num)
factorial <- num
factorial
typeof(factorial)
for (x in num:3) {
print(x)
x <- x-1
factorial <- factorial*x
}
print(factorial)
num <- as.numeric(readline('Enter number for calculating factorial: '))
num
typeof(num)
num <- as.numeric(readline('Enter number for calculating factorial: '))
num
typeof(num)
factorial <- num
factorial
typeof(factorial)
for (x in (num:3)) {
print(x)
x <- x-1
factorial <- factorial*x
}
print(factorial)
# installing/loading the latest installr package:
install.packages("installr"); library(installr) # install+load installr
updateR() # updating R.
library("ggplot2", lib.loc="~/R/win-library/4.1")
install.packages("ggplot2")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library("plotly", lib.loc="~/R/win-library/4.1")
install.packages("plotly")
library("plotly", lib.loc="~/R/win-library/4.1")
install.packages("plotly")
knitr::opts_chunk$set(echo = TRUE)
num <- as.numeric(readline('Enter number for calculating factorial: '))
num
typeof(num)
factorial <- num
factorial
typeof(factorial)
for x in (num:3) {
knitr::opts_chunk$set(echo = TRUE)
num <- as.numeric(readline('Enter number for calculating factorial: '))
num
typeof(num)
factorial <- num
factorial
typeof(factorial)
for x in (num:3) {
setwd("C:/Users/Uzma/CUNY-SPS-Assignments/MQari_R_Bridge_Week2")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
Students_score_csv <- read_csv(CASchool.csv)
Students_score_csv <- read_csv("CASchool.csv", header=TRUE)
Students_score_csv <- read_csv("CASchool.csv")
setwd("C:/Users/Uzma/RUT-SOM-VIRT-DATA-PT-03-2021-U-C/01-Lesson-Plans/16-Project-3-and-R/1/Activities/04_Ins_Navigation/Solved")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
sample_csv <- read_csv("data.csv")
head(sample_csv)
setwd("C:/Users/Uzma/CUNY-SPS-Assignments/MQari_R_Bridge_Week2")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(error = TRUE)
library(tidyverse)
Students_score_csv <- read_csv("CASchools.csv")
head(Students_score_csv)
slice(Students_score_csv, 1:10)
nrow(Students_score_csv)
slice(Students_score_csv, 5)
select(slice(Students_score_csv, district, grades, students)
select(slice(Students_score_csv, district, grades, students))
select(Students_score_csv, district, grades, students)
select(Students_score_csv, district, grades, students)
slice(Students_score_csv, 1, 5)
filter(Students_score_csv, cut == 'students')
filter(Students_score_csv, cut == 'district')
summarize_all(Students_score_csv)
filter(Students_score_csv, district == 75119)
filter(Students_score_csv, grades == kk-08 & students > 100)
filter(Students_score_csv, (grades == kk-08 & students > 100))
filter(Students_score_csv, (grades == kk-OG & students > 100))
filter(Students_score_csv, (grades == 'KK-06' & students > 100))
summary(Students_score_csv)
total_score <- mutate(Students_score_csv, english*math*read)
total_score <- mutate(Students_score_csv, english*math*read)
total_score
total_score2 <- mutate(Students_score_csv, total_score=(english*math*read))
total_score2
summarize(Students_score_csv, mean(income))
summarize(Students_score_csv, mean(expenditure))
expenditure <- group_by(Students_score_csv, expenditure)
expenditure <- group_by(Students_score_csv, expenditure)
expenditure <- group_by(Students_score_csv, expenditure)
expenditure
